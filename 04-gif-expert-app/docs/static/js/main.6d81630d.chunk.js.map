{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GiffExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GiffExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAqCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAkBvC,OACI,uBAAMC,SAXW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAe,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACxCN,EAAc,MAMlB,UACE,8CACA,uBACAO,KAAK,OACLC,MAAQT,EACRU,SApBoB,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,c,+BCPnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAETC,EAFS,0FAE+EC,UAAWH,GAF1F,sBAGII,MAAMF,GAHV,cAGTG,EAHS,gBAIQA,EAAKC,OAJb,uBAIPC,EAJO,EAIPA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAV1B,kBAcRM,GAdQ,4CAAH,sDCyBLO,EAvBM,SAAEf,GAAe,IAAD,EAEPd,mBAAS,CAC/BqB,KAAM,GACNS,SAAS,IAJoB,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAoBjC,OAbAC,qBAAW,WAEPpB,EAASC,GACJoB,MAAK,SAAAC,GACEH,EAAS,CACTX,KAAOc,EACPL,SAAS,SAIlB,CAAChB,IAGDiB,GCXIK,EAVK,SAAC,GAAuB,EAArBX,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,sBAAKqB,UAAU,OAAf,UACI,kCAAMX,EAAN,OACA,qBAAKY,IAAMtB,EAAKuB,IAAKb,QCsBlBc,EAzBC,SAAC,GAAoB,IAAjB1B,EAAgB,EAAhBA,SAAgB,EAEEe,EAAcf,GAAnCa,EAFmB,EAExBN,KAAcS,EAFU,EAEVA,QAGtB,OACI,qCACI,6BAAMhB,IAEJgB,GAAW,cACb,qBAAKO,UAAU,YAAf,SAEQV,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADEA,EAAIC,aCgBvBgB,EA9BO,WAAO,IAAD,EAEYzC,mBAAS,CAAC,WAFtB,mBAEjB0C,EAFiB,KAEL3C,EAFK,KAUxB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADTA,Y,MCnB9B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6d81630d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value ); \n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length >2){\n            setCategories( categ => [inputValue, ...categ]);\n            setInputValue('')\n        }\n        // console.log('Submit hecho')\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n          <h2>Add Category</h2>  \n          <input \n          type=\"text\"\n          value={ inputValue }\n          onChange={ handleInputChange }\n          />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","\nexport const getGifs = async(category) => {\n\n        const url=`https://api.giphy.com/v1/gifs/search?api_key=soVdva8bjB8shZXmy18BLAE5wCSgYZZv&q=${ encodeURI( category )}&limit=10`\n        const resp = await fetch(url);\n        const { data } = await resp.json();\n\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images.downsized_medium.url,\n            }\n        })\n\n        return gifs;\n    }","import { useEffect, useState } from 'react'\nimport {getGifs} from '../helpers/getGifs'\n\nconst useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true,\n    })\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then(imgs =>{\n                    setstate({\n                    data : imgs,\n                    loading: false\n                    });\n\n            })\n        }, [category])\n\n\n    return state;\n}\n\nexport default useFetchGifs;\n","import React from 'react'\n\nconst GifGridItem = ( {id, title, url} ) => {\n\n    return (\n        <div className=\"card\">\n            <p> { title } </p>\n            <img src={ url} alt={title}/>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ( { category } ) => {\n\n    const { data:images , loading } = useFetchGifs( category );\n\n\n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && 'Cargando...' }\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={ img.id }\n                            {...img}\n                        />\n                        ))\n                    }\n            </div>\n            \n        </>\n    )\n}\n\nexport default GifGrid\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GiffExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Bleach'])\n\n    // const handleAdd = () => {\n    //     setcategories(\n    //         [...categories, 'HunterXHunter']\n    //     )\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid\n                        key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GiffExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiffExpertApp from './GiffExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GiffExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}